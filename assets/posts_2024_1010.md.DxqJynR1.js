import{_ as n,c as s,G as a,b as p}from"./chunks/framework.DttWr7at.js";const l=JSON.parse('{"title":"杀怪物题解","description":"这是我的第一篇博客，勿喷","frontmatter":{"title":"杀怪物题解","tags":["Hello"],"categories":["题解"],"date":"2024-11-29T00:00:00.000Z","description":"这是我的第一篇博客，勿喷","articleGPT":"这篇题解展示了一个典型的深度优先搜索（DFS）应用，用来解决在限定操作次数下，如何尽可能多地击败怪物的问题。文章中给出的思路清晰，代码结构也较为完整，主要通过递归探索不同的操作组合，并通过比较来寻找最大可击败的怪物数量。然而，代码中的一些细节需要进一步的优化和解释。例如，t 数组的作用并不完全清楚，应该加以详细说明。同时，变量命名和注释较少，对于不熟悉此算法的读者来说，理解代码逻辑可能稍有困难。此外，递归的深度控制和状态回溯部分的实现也值得注意，尤其是在大规模数据的情况下，可能需要考虑时间复杂度的优化。总体来说，题解对于有一定算法基础的读者是有帮助的，但可以通过更清晰的解释和优化代码结构来提升易读性和可维护性。","references":[{"title":"vitepress-theme-curve","url":"https://github.com/imsyy/vitepress-theme-curve"}],"head":[["link",{"rel":"canonical","href":"https://czhblog.us.kg/posts/2024/1010"}]]},"headers":[],"relativePath":"posts/2024/1010.md","filePath":"posts/2024/1010.md","lastUpdated":1734413937000}');const e=n({name:"posts/2024/1010.md"},[["render",function(n,l,e,i,r,c){return p(),s("div",null,l[0]||(l[0]=[a('<h2 id="杀怪物题解" tabindex="-1">杀怪物题解 <a class="header-anchor" href="#杀怪物题解" aria-label="Permalink to &quot;杀怪物题解&quot;">​</a></h2><h1 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h1><p>为了庆祝自己的生日，小张推出一款游戏。 游戏在一个20*20的方格上进行，上面有一些怪物，用#表示，其他是空格，用 . 表示。怪物有两点体力。 体力为0时死亡。 你可以进行以下操作：</p><blockquote><p>（1）使一个横行上的怪物体力减一 （2）使一个竖行上的怪物体力减一 对每个横行或竖行只能操作一次，限定n次，问最多能杀死多少个怪物。</p></blockquote><h2 id="样例" tabindex="-1">样例： <a class="header-anchor" href="#样例" aria-label="Permalink to &quot;样例：&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>10 </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>#################### </span></span>\n<span class="line"><span>####################</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>输出：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h1><p>在这个题目中，我们需要在一个 20×20 的方格内进行操作，方格中存在一些怪物（用 # 表示），这些怪物每个拥有 2 点体力。 我们可以通过执行操作来减少横行或竖行上怪物的体力，每行或每列的操作只能执行一次，并且有最多 ( n ) 次操作。 目标是计算在有限的操作次数内，最多能令多少个怪物的体力降至 0。</p><p>输入：第一行为一个整数 ( n )，表示可执行的操作次数。 随后是一个 20×20 的方格，以 # 和 . 表示怪物和空格。 输出：能击败的最大怪物数量。 程序结构 程序采用深度优先搜索（DFS）算法来探索不同的操作组合。 以下是程序的关键部分：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>void dfs(int x,int y)</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    if(y&gt;=m)return;</span></span>\n<span class="line"><span>    int t[25]={0},t1=0,t2=m-y;</span></span>\n<span class="line"><span>    for(int i=1;i&lt;=20;i++)</span></span>\n<span class="line"><span>\t{</span></span>\n<span class="line"><span>\t\tt[c[i]]++;</span></span>\n<span class="line"><span>\t}</span></span>\n<span class="line"><span>    for(int i=20;i&gt;0;i--)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        if(t==0)break;</span></span>\n<span class="line"><span>        if(t[i]&lt;=t2)</span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tt1+=t[i]*i;</span></span>\n<span class="line"><span>\t\t\tt2-=t[i];</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>        else </span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tt1+=t2*i;</span></span>\n<span class="line"><span>\t\t\tt2=0;</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    ans=max(ans,t1);</span></span>\n<span class="line"><span>    for(int i=x;i&lt;=20;i++)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        for(int j=1;j&lt;=20;++j)</span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tif(a[i][j])</span></span>\n<span class="line"><span>\t\t\t{</span></span>\n<span class="line"><span>\t\t\t\tc[j]++;</span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>        dfs(i+1,y+1);</span></span>\n<span class="line"><span>        for(int j=1;j&lt;=20;++j)</span></span>\n<span class="line"><span>\t\t{</span></span>\n<span class="line"><span>\t\t\tif(a[i][j])</span></span>\n<span class="line"><span>\t\t\t{</span></span>\n<span class="line"><span>\t\t\t\tc[j]--; </span></span>\n<span class="line"><span>\t\t\t}</span></span>\n<span class="line"><span>\t\t}</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>变量和数组定义：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>n: 可操作的次数。</span></span>\n<span class="line"><span>a[25][25]: 用于存储方格內怪物的体力，# 初始化为 2，. 初始化为 0。</span></span>\n<span class="line"><span>c[25]: 计数器数组，用于记录每一列的怪物数量。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函数 dfs(int x, int y) 负责探索所有可能的操作组合。</p><p>在每次递归中，首先检查是否已进行 ( n ) 次操作。</p><p>记录当前的怪物数量，并尝试进行横行或竖行的操作，递归调用 dfs 函数。</p><p>最大怪物数量的计算：</p><p>每次操作后，通过 max 函数更新可击败的怪物最大数量。 ans: 存储能击败的最大怪物数量。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#include &lt;iostream&gt;</span></span>\n<span class="line"><span>#include &lt;queue&gt;</span></span>\n<span class="line"><span>using namespace std;</span></span>\n<span class="line"><span>struct node</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    int x;</span></span>\n<span class="line"><span>    int y;</span></span>\n<span class="line"><span>};</span></span>\n<span class="line"><span>queue&lt;node&gt; q;</span></span>\n<span class="line"><span>int n,m,sum;</span></span>\n<span class="line"><span>char map[105][105];</span></span>\n<span class="line"><span>int vist[105][105];</span></span>\n<span class="line"><span>char buff[10005];</span></span>\n<span class="line"><span>void acc(node no,int ox,int oy)</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    if(oy&gt;=1&amp;&amp;ox&gt;=1&amp;&amp;ox&lt;=n&amp;&amp;oy&lt;=m)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        if(map[ox][oy]==&#39;#&#39;){</span></span>\n<span class="line"><span>            if(vist[ox][oy]==0){</span></span>\n<span class="line"><span>                vist[ox][oy]=no.x*m+no.y;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>            else if(vist[ox][oy]==no.x*m+no.y);</span></span>\n<span class="line"><span>            else{</span></span>\n<span class="line"><span>                sum++;</span></span>\n<span class="line"><span>                vist[ox][oy]=no.x*m+no.y;</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        else{</span></span>\n<span class="line"><span>            if( vist[ox][oy]==0){</span></span>\n<span class="line"><span>                vist[ox][oy]=1;</span></span>\n<span class="line"><span>                node newNode={ox,oy};</span></span>\n<span class="line"><span>                q.push(newNode);</span></span>\n<span class="line"><span>            }</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span> </span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>     </span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>void bfs(node no)</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    q.push(no);</span></span>\n<span class="line"><span>    while (!q.empty()) {</span></span>\n<span class="line"><span>        node ncur=q.front();</span></span>\n<span class="line"><span>        q.pop();</span></span>\n<span class="line"><span>        int ox,oy;</span></span>\n<span class="line"><span>        ox=ncur.x;</span></span>\n<span class="line"><span>        oy= ncur.y-1;</span></span>\n<span class="line"><span>         acc(no,ox,oy);</span></span>\n<span class="line"><span>        ox=ncur.x;</span></span>\n<span class="line"><span>        oy=ncur.y+1;</span></span>\n<span class="line"><span>        acc(no,ox,oy);</span></span>\n<span class="line"><span>        ox=ncur.x-1;</span></span>\n<span class="line"><span>        oy=ncur.y;</span></span>\n<span class="line"><span>        acc(no,ox,oy);</span></span>\n<span class="line"><span>        ox=ncur.x+1;</span></span>\n<span class="line"><span>        oy=ncur.y;</span></span>\n<span class="line"><span>        acc(no,ox,oy);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>int main(){</span></span>\n<span class="line"><span>    cin&gt;&gt;n&gt;&gt;m;</span></span>\n<span class="line"><span>    for (int i=1;i&lt;=n;i++){</span></span>\n<span class="line"><span>        cin&gt;&gt;buff;</span></span>\n<span class="line"><span>        for (int j=0;j&lt;m;j++)</span></span>\n<span class="line"><span>            map[i][j+1]=buff[j];</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    node n11={1,1};</span></span>\n<span class="line"><span>    vist[1][1]=1;</span></span>\n<span class="line"><span>    bfs(n11);</span></span>\n<span class="line"><span>    node nmn={n,m};</span></span>\n<span class="line"><span>    vist[n][m]=1;</span></span>\n<span class="line"><span>    bfs(nmn);</span></span>\n<span class="line"><span>    cout&lt;&lt;sum;</span></span>\n<span class="line"><span>    return 0;</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div>',20)]))}]]);export{l as __pageData,e as default};
